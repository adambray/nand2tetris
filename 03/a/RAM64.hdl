// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then
 * the in value is loaded into the memory location specified by address
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Distributes load bit to correct ram chip based on first 3 bits of address
    DMux8Way(in=load, sel=address[0..2], a=l0, b=l1, c=l2, d=l3, e=l4, f=l5, g=l6, h=l7);

    // Takes an in signal and last three bits of address
    RAM8(in=in, address=address[3..5], load=l0, out=out0);
    RAM8(in=in, address=address[3..5], load=l1, out=out1);
    RAM8(in=in, address=address[3..5], load=l2, out=out2);
    RAM8(in=in, address=address[3..5], load=l3, out=out3);
    RAM8(in=in, address=address[3..5], load=l4, out=out4);
    RAM8(in=in, address=address[3..5], load=l5, out=out5);
    RAM8(in=in, address=address[3..5], load=l6, out=out6);
    RAM8(in=in, address=address[3..5], load=l7, out=out7);

    // Chooses which ram chip to output based on first three bits of address
    Mux8Way16(sel=address[0..2],
              a=out0,
              b=out1,
              c=out2,
              d=out3,
              e=out4,
              f=out5,
              g=out6,
              h=out7,
              out=out);
}
